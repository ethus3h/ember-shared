#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || true
#set -x

# Should work without ember-shared (or crystallize), just in case, so don't depend on ember_bash_setup or set traps that need it

#NOTE: MAINTENANCE: Manual error printing
trap 'printf '\''%b'\'' '\''\033[1;31m'\'' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd)." >&2; printf '\''%b'\'' '\''\033[0m'\'' >&2; exit 1' ERR

# NOTE: MAINTENANCE: Inlined function from warn
warn() {
    printf %b '\033[1;33m' "$(ps -o args= $PPID)" '\nsends the warning:\n' "${@+$@$'\n'}" '\033[0m' >&2
}

if [[ "$OSTYPE" = darwin* ]]; then
    scripts/emberMacGNUUpgrade
    # NOTE: MAINTENANCE: Upgrade list from "prepareForMac" template file
    find scripts -type f -exec perl -0777 -p -i -e 's/readlink /greadlink /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/dirname /gdirname /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/sort /gsort /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/stdbuf /gstdbuf /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/sha256sum /gsha256sum /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/sha512sum /gsha512sum /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/ncdu /8731d097a5ed41149c7ffb67756c310e /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/du /gdu /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/8731d097a5ed41149c7ffb67756c310e /ncdu /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/sed /gsed /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/find /gfind /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/stat /gstat /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/wc /gwc /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/mktemp /gmktemp /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/split /gsplit /g' {} \;
    find scripts -type f -exec perl -0777 -p -i -e 's/tar /gtar /g' {} \;
fi
rm -f scripts/emberMacGNUUpgrade

if [[ "$OSTYPE" = darwin* ]]; then
    sudo ./support/macRootPrepare
    sudo chsh -s /usr/local/bin/bash "$USER"
fi

datadir=""
if [[ -e "support/.datadir" ]]; then
    datadir="$(<support/.datadir)"
fi
if [[ -z "$datadir" ]]; then
    if [[ -e "support/.datarootdir" ]]; then
        datadir="$(<support/.datarootdir)"
    else
        datadir="/usr/local/share/"
    fi
fi
if [[ -e "support/.prefix" ]]; then
if [[ -e "support/.destdir" ]]; then
if [[ "/" != "${datadir: -1}" ]]; then
    datadir="$datadir/"
fi
#    [1...                            ][2...      ][3..]
echo 'getEmberSharedDataDir() { print '"'$datadir'"'; }' >> modules/core/ember_bash_setup_core
# 1 = single-quoted string; 2 = double-quoted string with literal single-quotation marks; 3 = single-quoted string

support/install-prepare-module

module="$(<support/.module)"
if [[ "error-notify" == "$module" ]] || [[ "core" == "$module" ]]; then
    # Nothing more to do for these modules, to avoid dependency on perl in the substitutePath tool below, and on futuramerlin-web-toolkit for the documentation (if any is later added)
    exit 0
fi

source support/getDirs

#NOTE: MAINTENANCE: Remainder copied from "prepare" template file

substitutePath() {
    defaultPath="${1//\//\\\/}"
    newPathVarName="$2"
    export "${newPathVarName?}"
    local pathEsc
    pathEsc="$(perl -0777 -e 'print(quotemeta($ENV{'"$newPathVarName"'}))')"
    echo "pathEsc for $newPathVarName: $pathEsc"
    find scripts -maxdepth 1 -type f -exec perl -0777 -p -i -e "s/$defaultPath/$pathEsc/g" {} \;
}

if [[ -e scripts ]]; then
    substitutePath "/usr/local/bin" "emberBindir"

    substitutePath "/usr/local/etc" "emberSysconfdir"

    substitutePath "/usr/local/share" "emberDatadir"
fi

if [[ -e docs ]]; then
    if ! [[ -d docs ]]; then
        warn "\"docs\" exists, but is not a directory. Documentation will not be installed."
    elif ! [[ -f 'docs/.futuramerlin-web-toolkit/.futuramerlin-web-toolkit.cfg' ]]; then
        echo "(The package doesn't contain a docs/.futuramerlin-web-toolkit/.futuramerlin-web-toolkit.cfg file, so the documentation will be installed as normal files.)" 1>&2
    else
        if ! fmwtk_loc="$(type -P "futuramerlin-web-toolkit-build")" || [[ -z $fmwtk_loc ]]; then
            warn "Not building documentation: futuramerlin-web-toolkit not found."
        else
            pushd "docs" || die
            futuramerlin-web-toolkit-build
            popd || die
        fi
    fi
fi
