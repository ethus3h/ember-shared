#!/usr/bin/env bash

#set -x

export emberSharedVersion='1.1.4.556'

# The update script shown here requires there to be only one ebuild of ember-shared in the wreathe-overlay overlay.
# ( sudo true; emberPath="$(ember-getconf EmberLibrary)"; newVersion="1.1.4.556"; cd "$emberPath/ember-shared"; echo "$newVersion" > version; eogup-single; git tag -a "v$newVersion" -m "version"; egup-single .; cd "$emberPath/wreathe-overlay"; eogup-single; mv app-misc/ember-shared/ember-shared-*.ebuild "app-misc/ember-shared/ember-shared-$newVersion.ebuild"; repoman manifest; egup-single; sudo emerge --sync wreathe-overlay; sudo emerge ember-shared; sudo dispatch-conf; cd "$emberPath/ember-shared"; generateGuixPackaging ember-shared-error-notify;  generateGuixPackaging ember-shared-core;  generateGuixPackaging ember-shared-main; generateGuixPackaging ember-shared-extra; eogup-single; git push; )

# Depends: ember_bash_setup_core and its dependencies, (util-linux on GNU/Linux or Python on macOS), grep, find, nano, sudo, assume depends on other ember-shared scripts EXCEPT csum (depends hashdeep), borgw (depends borg), ember_bash_setup_extra (see for dependencies), ember-shared-update, findq/findq-update (depend locate), htmlToText.pl (depends HTML::Restrict), serve-ember-web-site (depends PHP), wave2png.py (depends wave (from Python itself), matplotlib, pylab (part of matplotlib)).

# To use the --version option of ember_bash_setup, it is necessary to have e8787d06e61943a6874e94985b53bc0a="2dee41bf-53fb-4f65-997f-33bf50bfbb4d" and run ember_bash_setup --version. It may be important to run unset e8787d06e61943a6874e94985b53bc0a afterwards.
d1875509777f46809ff940e0aad970f0=""
if [[ "$-" == *u* ]]; then
    d1875509777f46809ff940e0aad970f0="true"
    set +u
fi
# shellcheck disable=SC2154
a9c9efb644e24ef5b9cb1ec95e279c02="$e8787d06e61943a6874e94985b53bc0a"

if [[ "$1" == "--version" ]] && [[ "$a9c9efb644e24ef5b9cb1ec95e279c02" != "2dee41bf-53fb-4f65-997f-33bf50bfbb4d" ]]; then
    esVersionA="$(sed '5q;d' "$(type -P ember_bash_setup)")"
    esVersionB="${esVersionA%\'*}"
    echo "${esVersionB##*\'}"
    exit 0
fi
if [[ "$d1875509777f46809ff940e0aad970f0" == "true" ]]; then
    set -u
fi
unset d1875509777f46809ff940e0aad970f0 a9c9efb644e24ef5b9cb1ec95e279c02

# Allow problems to be caught within pipelines
set -o pipefail
if [[ -z "$PS1" ]]; then
    # The shell is not interactive
    # Make traps inherited, but only if the shell is non-interactive
    set -o errtrace
    set -o functrace
    # Fail if glob doesn't match. Breaks bash completions for emerge, so non-interactive only.
    shopt -s failglob
else
    # The shell is interactive
    nano() {
        nanoLocation="$(type -P nano)"
        nanoFileToEdit="${!#}"
        if [[ -w "$nanoFileToEdit" ]]; then
            "$nanoLocation" -wLN "$@"
        else
            sudo -k "$nanoLocation" -wLN "$@"
        fi
    }
fi

#set -o nounset

# More verbose debugging
PS4='+($?) $BASH_SOURCE:$FUNCNAME:$LINENO:'
export PS4

if [[ -z "$GUIX_PROFILE" ]] && [[ -e "$HOME/.config/guix/current" ]]; then
    export GUIX_PROFILE="$HOME/.config/guix/current"
    source "$GUIX_PROFILE/etc/profile"
    export GUIX_PROFILE="$HOME/.guix-profile"
    source "$GUIX_PROFILE/etc/profile"
    export GUIX_LOCPATH="$GUIX_PROFILE/lib/locale"
    export PATH="$GUIX_PROFILE/bin:$PATH"
    export INFOPATH="$HOME/.config/guix/current/share/info:$INFOPATH"
fi

# Required core tools
# shellcheck disable=SC1091
source ember_bash_setup_core &> /dev/null

# These may not be available on non-Wreathe systems
# shellcheck disable=SC1091
source crystallize-bash_setup &> /dev/null || true
# shellcheck disable=SC1091
source wreathe_bash_setup &> /dev/null || true
# shellcheck disable=SC1091
source bash_math_functions &> /dev/null || true
# shellcheck disable=SC1091
source egup-env &> /dev/null || true

# Optional extra components
# shellcheck disable=SC1091
source ember_bash_setup_extra &> /dev/null || true

embasename() (
    path="$1"
    if [[ "$path" == "/" ]]; then
        printf "/"
        exit 0
    elif [[ "$1" =~ '/'$ ]]; then
        path="${path::${#path}-1}"
    fi
    printf "%s" "${path##*/}"
)

abspath() (
    # This is terrible compared to realpath (mostly untested; can't handle multiple ..s in argument etc), but it has the advantage of preserving symlinks in the pwd. Better to avoid it.
    setVariableToCommandOutput "enclosingDirectory" dirname -z "$1"
    if [[ "$2" == "--resolve-symlinks-in-enclosing-directory-path" ]]; then
        setVariableToCommandOutput "enclosingDirectory" readlink -fz "${enclosingDirectory:?}"
    fi
    cd "${enclosingDirectory:?}" || exit 1
    setVariableToCommandOutput "basename" embasename "$1"
    if [[ "${basename:?}" == "." ]]; then
        basename=""
    elif [[ "${basename:?}" == ".." ]]; then
        cd ..
        basename=""
    fi
    if [[ "$PWD" == "/" ]]; then
        # Avoid doubled slash
        print "$PWD$basename"
    else
        print "$PWD/$basename"
    fi
)

emreadlink() {
    abspath "$@" "--resolve-symlinks-in-enclosing-directory-path"
}

say() {
    printf '%s\n' "$@"
}

tr() {
    if [[ "$OSTYPE" = darwin* ]]; then
        LC_CTYPE=C command tr "$@"
    else
        command tr "$@"
    fi
}

getDefaultEditor() {
    print "${FCEDIT:-${VISUAL:-${EDITOR:-nano}}}"
}

getDefaultEditorPath() {
    type -P "$(getDefaultEditor)"
}

defaultEditor() {
    "$(getDefaultEditorPath)" "$@"
}

date-uuid() (
    trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

    local uuid
    if [[ "$OSTYPE" = darwin* ]]; then
        uuid="$(python -c 'import uuid; print str(uuid.uuid4())')"
    else
        uuid="$(uuidgen -r)"
    fi

    local temp
    temp="$(emdate)-$uuid"
    echo "${temp//-/}"
)

perl_ere_quote() {
    eescape "$@"
}

prefixPipe() {
    cat <(print "$1") <(cat -)
}

suffixPipe() {
    cat <(cat -) <(print "$1")
}

surroundPipe() {
    cat <(print "$1") <(cat -) <(print "$2")
}

removeDuplicateLines() {
    awk '!seen[$0]++' "$@"
}

isEmptyDir() (
    if [[ -d "$1" ]]; then
        # shellcheck disable=SC2063
        if find "$1" -maxdepth 0 -type d -empty | grep -E '.*' 2>/dev/null; then
            exit 0
        fi
        exit 1
    fi
    exit 1
)

spushd() { # don't print directory by default
    pushd "$@" > /dev/null || false
}

spopd() { # don't print directory by default
    popd "$@" > /dev/null || false
}

ereplaceRegEx() {
    (
        # Perl returns 0 even if it can't find the file (without extra perl code), so test first.
        if [[ ! -e "$3" ]]; then
            die "ereplaceRegEx: The target file $3 does not exist."
        fi
        ereplaceFrom="$1"
        ereplaceTo="$2"
        perl -0777 -p -i -e 's/'"$ereplaceFrom"'/'"$ereplaceTo"'/g' "$3"
    )
}

version_gt() {
    # from https://stackoverflow.com/questions/16989598/bash-comparing-version-numbers
    test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"
}

isNonnegativeInteger() {
    # Can just use [[ "$var" == +([0-9]) ]], but the version of bash provided by Homebrew on macOS doesn't handle this correctly, so it's reimplemented here.
    local re='^[0-9]+$'
    if [[ "$1" =~ $re ]]; then
        return 0
    else
        return 1
    fi
}

readconf() {
    local key="$1"
    local file="$2"
    if [[ -z "$file" ]]; then
        file="$1"
        key=""
    fi
    readconfValue=()
    while IFS= read -r line; do
        if ! [[ "$line" =~ ^# ]]; then
            if [[ -z "$key" ]]; then
                readconfValue+=("$line")
            else
                if [[ "$(cut -f1 -d, <<< "$line")" == "$1" ]]; then
                    readconfValue+=("$(cut -f2- -d, <<< "$line")")
                fi
            fi
        fi
    done < "$2"
}

preadconf() {
    readconf "$@"
    print "${readconfValue[0]}"
}

# These ia* functions need to run in subshells so die doesn't affect the caller.
iaident() (
    local url="$1"
    local fullPath="${url#https:\/\/archive.org\/download\/}"
    local fullPath="${fullPath#https:\/\/archive.org\/details\/}"
    local fullPath="${fullPath#https:\/\/www.archive.org\/download\/}"
    local fullPath="${fullPath#https:\/\/www.archive.org\/details\/}"
    local res="${fullPath%%\/*}"
    [[ -n "$res" ]] || exit 1
    print "$res"
)

iapath() (
    local url="$1"
    if [[ "$url" != */* ]]; then
        # Doesn't contain a slash, so this is a bare identifier
        return 0
    fi
    local fullPath="${url#https:\/\/archive.org\/download\/}"
    local fullPath="${fullPath#https:\/\/archive.org\/details\/}"
    local fullPath="${fullPath#https:\/\/www.archive.org\/download\/}"
    local fullPath="${fullPath#https:\/\/www.archive.org\/details\/}"
    local res="${fullPath#*\/}"
    [[ -n "$res" ]] || exit 1
    print "$res"
)

iafilename() (
    basename "$(iapath "$1")"
)

iaurl() (
    print "https://archive.org/download/"
    iaident "$1"
    print "/"
    iapath "$1"
)

isIaName() (
    local regex='^https:\/\/archive.org\/download\/.+$'
    if [[ "$1" =~ $regex ]]; then
        exit 0
    fi
    exit 1
)

hasWebProtocol() (
    local httpRegex='^https?:\/\/.+$'
    local ftpRegex='^ftp:\/\/.+$'
    if [[ "$1" =~ $httpRegex ]] || [[ "$1" =~ $ftpRegex ]]; then
        exit 0
    fi
    exit 1
)

getGrabSiteGrabLocation() {
    local grabSiteLocation
    grabSiteLocation="$(getWorkdirLocation)/.grab-site-grabs"

    default() {
        mkdir -p "$(getWorkdirLocation)/.grab-site-grabs/warcs" || return 1
        echo "$grabSiteLocation" || return 1
        return 0
    }

    if [[ -d "$grabSiteLocation" ]]; then
        default
        return 0
    fi

    if [[ -d "$HOME/gs-grabs/gs-grabs" ]]; then
        echo "$HOME/gs-grabs/gs-grabs"
        return 0
    elif [[ -d "$HOME/gs-grabs" ]]; then
        echo "$HOME/gs-grabs"
        return 0
    fi

    default || return 1
    return 0
}

urlencode() {
    local LANG=C
    for ((i=0; i < ${#1}; i++)); do
        if [[ ${1:$i:1} =~ ^[a-zA-Z0-9\.\~_-]$ ]]; then
            printf '%s' "${1:$i:1}"
        else
            printf '%%%02X' "'${1:$i:1}"
        fi
    done
}

urldecode() {
    local url_encoded="${1//+/ }"
    printf '%b' "${url_encoded//%/\\x}"
}

isSubdirOf() {
    possibleEnclosingDir="$(readlink -f "$1")"
    possibleSubdir="$(readlink -f "$2")"
    if [[ "${possibleSubdir##$possibleEnclosingDir}" != "$possibleSubdir" ]]; then
        # This is a subdirectory
        return 0
    else
        return 1
    fi
}

pipecheck() {
    allElementsEqual "0" "$@" || die "A failure status was reported by a call to pipecheck, with the reported exit statuses $(join_by ", " "$@")"
}

retryUntilSuccess() (
    local numberRegex='^[0-9]+$'
    local maximumRetries=-1
    if [[ "$1" =~ $numberRegex ]]; then
        maximumRetries="$1"
        shift
    fi
    local maximumDelayTime=0
    if [[ "$1" =~ $numberRegex ]]; then
        maximumDelayTime="$1"
        shift
    fi
    local delayTimeBackoffIncrement=1
    if [[ "$1" =~ $numberRegex ]]; then
        delayTimeBackoffIncrement="$1"
        shift
    fi
    local retryDelayTime=0
    if [[ "$1" =~ $numberRegex ]]; then
        # This sets the initial delay time
        retryDelayTime="$1"
        shift
    fi
    local currentRetries="$maximumRetries"
    local postExecCheckSuccess=""
    postExecCheckFailHandler() {
        if [[ -z "$postExecCheckSuccess" ]] || [[ "$postExecCheckSuccess" == "1" ]]; then
            postExecCheckSuccess="1"
        else
            postExecCheckSuccess="0"
        fi
    }
    until [[ "$currentRetries" -eq "0" ]]; do
        if "$@"; then
            postExecCheckFailHandler
            break
        fi
        if [[ "$currentRetries" != "0" ]]; then
            currentRetries=$((currentRetries-1))
        fi
        sleep "$retryDelayTime"
        if [[ "$retryDelayTime" -lt "$maximumDelayTime" ]]; then
            retryDelayTime=$((retryDelayTime + delayTimeBackoffIncrement))
        fi
    done
    [[ "$postExecCheckSuccess" != "1" ]] && die "Number of allowed retries exceeded without success."
    true # needed because the if statement executes with the exit status of the last command executed
)

normalizeWhitespace() {
    # BROKEN: doesn't exit (when run with blah as its string)
    if [[ -n "$1" ]]; then
        print "$1" | normalizeWhitespace
    else
        stdbuf -o0 tr '\n' ' ' | stdbuf -o0 tr '\r' ' ' | stdbuf -o0 tr -s '[:blank:]' | awk '{$1=$1};1'
    fi
}

getWorkdirLocation() {
    local tempLocation;
    tempLocation="$(ember-getconf WorkDirectory)"
    [[ -n "$tempLocation" ]] || return 1
    print "$tempLocation"
}

getBigTempLocation() {
    local tempLocation="$EMBER_TEMPDIR"
    [[ -z "$tempLocation" ]] && tempLocation="$(ember-getconf WorkDirectory)"
    [[ -z "$tempLocation" ]] && tempLocation="$(getSystemTempLocation)"
    print "$tempLocation"
}

getSystemTempLocation() {
    if [[ -n "$TMPDIR" ]]; then
        print "$TMPDIR"
    else
        dirname "$(mktemp tmp.XXXXXXXXXX -ut)"
    fi
    return 0
}

bigTempDir() {
    local directoryId
    directoryId="$(getBigTempLocation)/.tempDir-$(date-uuid)/"
    mkdir -p "$directoryId"
    echo "$directoryId"
}

bigTempFile() {
    local fileId
    fileId="$(getBigTempLocation)/.tempFile-$(date-uuid)"
    touch "$fileId"
    echo "$fileId"
}

tempDir() {
    mktemp --tmpdir -d ".tempFile-$(date-uuid).XXXXXXXXXX"
}

tempFile() {
    mktemp --tmpdir ".tempFile-$(date-uuid).XXXXXXXXXX"
}

crystallize-getconf() {
    [[ -n "$EmberWorkdirOverride54ae685dc782437c99bc46c7a1211377" ]] && export EmberWorkdirOverride54ae685dc782437c99bc46c7a1211377
    command crystallize-getconf "$@"
}

newline-terminated-characters-from-text() {
    sed 's/$/\n/g' | sed 's/\(.\)/\1\n/g'
}

newline-terminated-characters-to-text() {
    local n
    while read -r; do
        if [[ -n "$REPLY" ]]; then
            printf %s "$REPLY";
            n=0;
        else
            if (( ++n % 2 )); then
                printf '\n';
            fi;
        fi;
    done
}

get-default-firefox-profile() (
    # based on https://askubuntu.com/questions/239543/get-the-default-firefox-profile-directory-from-bash
    if [[ -n "$1" ]]; then
        cd "$1" || die "Could not cd to the specified directory"
    else
        cd ~/.mozilla/firefox || die "Could not cd to ~/.mozilla/firefox"
    fi
    pwd | head -c -1
    print '/'
    if grep -q '\[Profile[^0]\]' profiles.ini; then
        grep -E '^\[Profile|^Path|^Default' profiles.ini | grep -1 '^Default=1' | grep '^Path' | cut -c6-
    else
        grep 'Path=' profiles.ini | sed 's/^Path=//'
    fi
)

trap 'error-notify "An error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR
