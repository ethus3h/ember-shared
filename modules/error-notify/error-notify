#!/usr/bin/env bash
emdate() (
    # If changing this, also change the copy in the ember_bash_setup_core script.
    trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd)."' ERR

    temp="$(date -u +%Y-%m-%d-%H-%M-%S-%N)U$(xxd -pu <<< "$(date +%z)")"
    echo "${temp//-/}"
)
# If first argument is an integer, print the remaining arguments and exit with the first argument as the exit status. Otherwise, print all the arguments and exit with exit status 1. If there are no arguments to print, don't print anything.
if [[ $# -eq 0 ]]; then
    # There are no arguments; just exit
    exit 1
fi
if [[ $1 =~ ^-?[0-9]+$ ]]; then
    # The first argument is an integer.
    ec="$1"
    if [[ $# -eq 1 ]]; then
        # Only an exit code was given, so exit immediately.
        exit "$ec"
    fi
    shift
else
    # The first argument is not an integer, so default to 1
    ec="1"
fi
printf '%b' '\033[1;31m' >&2
printf '%s\n' "$(ps -o args= $PPID)" >&2 || true
printf '%s\n' 'failed with the error on '"${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)"':' >&2
printf '%s' "${@+$@$'\n'}" >&2
printf '%b' '\033[0m' >&2

# Make error-notify a no-op, and then trigger any traps that are set for processes exiting with the error code this script has computed and chosen to exit with
error-notify() {
    true
}
save_traps="$(trap)"
trap 'eval "$save_traps"; false; exit 1' ERR
( exit "$ec" )

exit "$ec"
