#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

# Ember Git UPdater for single repository

# Exit sudo environments unless there's an .egup.allowRootEgup file
if [[ -f ./.egup.allowRootEgup ]]; then
    [[ "$(whoami)" == "root" ]] && warn "Allowing sudo-root egup."
else
    userName="$(stat -c '%U' .)"
    [[ "$(whoami)" != "$userName" ]] && exec sudo -u "$userName" -- "$0" "$@"
fi

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd)."' ERR
# set -x

offline="false"
if [[ "$1" == "--offline" ]]; then
    offline="true"
    shift
fi

sudoGitattributes="false"
if [[ "$1" == "--sudo-gitattributes" ]]; then
    sudoGitattributes="true"
    shift
fi

noHooks="false"
if [[ "$1" == "--no-hooks" ]]; then
    noHooks="true"
    shift
fi

cd "$1" || exit 1

commitMessage="Update Git repository using egup-single"
commitMessageAppendable=""
if [[ -n "$2" ]]; then
    commitMessage="$2"
    commitMessageAppendable=" (associated commit: $commitMessage)"
fi

egup-env

# Get rid of gitattributes files, if there are any, since they're basically "destroy my files" files. http://web.archive.org/web/20190331062043/https://stackoverflow.com/questions/55330848/how-to-recover-corrupted-png-files-due-to-improper-gitattributes (this isn't enough to save your data; see below)
if [[ "$sudoGitattributes" == "true" ]]; then
    sudo find . -name '.gitattributes' -exec mv {} {}.47f639ce-3b2a-4a0a-9e3e-8c83fd09e259 \;
else
    find . -name '.gitattributes' -exec mv {} {}.47f639ce-3b2a-4a0a-9e3e-8c83fd09e259 \;
fi
mkdir -p ./.egup.git-config
[[ -e "$GIT_DIR"/info/attributes ]] && mv "$GIT_DIR"/info/attributes ./.egup.git-config/git_dir_info_attributes
[[ -e "$GIT_DIR"/info/attributes ]] && die "Tried to move git attributes file, but it's still there!"
# Just getting rid of gitattributes isn't enough; [core] autocrlf = false must also be set.
[[ -e "$GIT_DIR"/config ]] && cp "$GIT_DIR"/config ./.egup.git-config/gitdir-config
[[ -e ./.gitconfig ]] && cp ./.gitconfig ./.egup.git-config/gitconfig
git config --show-origin --get-all core.autocrlf > ./.egup.git-config/autocrlf-origins || true
git config --local --get-all core.autocrlf > ./.egup.git-config/autocrlf-local || true
git config --show-origin --local --get core.autocrlf > ./.egup.git-config/autocrlf-origin-local-single || true
git config --local --get core.autocrlf > ./.egup.git-config/autocrlf-local-single || true
git config --local core.autocrlf > ./.egup.git-config/autocrlf-local-single-no-get || true
git config --local --replace-all core.autocrlf false
[[ "false" == "$(git config --local --get core.autocrlf)" ]] || die "Tried to set core.autocrlf to false, but it's not! Continuing would risk destroying the data in your repository."

if [[ -f .egup.git-native-excludes ]]; then
    echo "(Applying native Git excludes)"
    cp .egup.git-native-excludes .git/info/exclude # instead of using $GIT_DIR, because then it would get applied to the elen environment git dir too
fi

# Back up the .gitignore in preparation for the next step
git add .gitignore &>/dev/null || true # It's ok if this fails — it probably means there is no .gitignore
git commit -m "[egup] Update .gitignore$commitMessageAppendable" -- .gitignore &>/dev/null || true #It's ok if this fails — it probably means there is nothing to commit

if [[ -f .egup.git-native-excludes ]] && [[ "$(readlink -f .git/info/exclude)" == "$(readlink -f "$GIT_DIR"/info/exclude)" ]]; then
    # Not in an elen environment, so make sure the .gitignore hasn't gotten screwed up before running anything else
    cp .egup.git-native-excludes .gitignore
fi

branch="$(git branch | grep -E "^\* " | cut -c 3-)"
git checkout "$branch"
git add -A || die "Error adding changes."
git add -A . || die "Error adding changes."
git commit -a -m "$commitMessage" || echo "(Note: Repository appears to have no changes to commit.)"
if [[ -f .egup.hooks ]]; then
    if [[ "$noHooks" == "true" ]]; then
        warn "Skipping hooks because --no-hooks was specified."
    else
        echo "Beginning running hooks..."
        ./.egup.hooks || warn "WARNING! pre-build-hooks failed; continuing anyway."
        echo "Done running hooks."
        git commit -a -m "[egup] Update hooks$commitMessageAppendable" || true #It's ok if this fails — it probably means there is nothing to commit, and the user was already notified by saying "no changes to commit" earlier.
    fi
fi

status=""
while [[ "$status" != "completed" ]]; do
    # Do this part of the process twice to make reasonably sure remote changes to branches/refs/tags are correctly reflected in the .egup.{branches/refs/tags/stat} files

    git branch --list -a -v > .egup.branches
    sed -i '/^\* master /d' .egup.branches
    sed -i '/^  remotes\/origin\/master /d' .egup.branches
    git remote -v > .egup.remotes
    git show-ref -d > .egup.refs
    sed -i '/^[a-f0-9]\{40\} refs\/heads\/master$/d' .egup.refs
    sed -i '/^[a-f0-9]\{40\} refs\/remotes\/origin\/HEAD$/d' .egup.refs
    sed -i '/^[a-f0-9]\{40\} refs\/remotes\/origin\/master$/d' .egup.refs
    git show-ref -d --tags > .egup.tags || echo "(Note: Repository appears to have no tags.)"

    rm -rf ./.egup.stat
    rm -rf ./.egup.stat.d
    find . -maxdepth 1 -name '.egup.stat.split*' -delete

    print "${emberSharedVersion:?}-shared"$'\n' > .egup.version
    if [[ ! -f "./.egup.no-stat" ]]; then
        repositoryFolderName="$(basename "$(readlink -f .)")"

        [[ "$repositoryFolderName" == "ember-web-site-snapshots" ]] && find . -name '.git' -and -not -path './.git' -exec mv {} {}.egup-single-disabled \;
        [[ "$repositoryFolderName" == "ember-web-site-snapshots" ]] && emberWebSnapshotsRepositoryFolderName='-false'
        [[ "$emberWebSnapshotsRepositoryFolderName" == "-false" ]] || emberWebSnapshotsRepositoryFolderName='-true'

        [[ "$repositoryFolderName" == "ember-web-site" ]] && emberWebRepositoryFolderName='-true'
        [[ "$emberWebRepositoryFolderName" == "-true" ]] || emberWebRepositoryFolderName='-false'

        mkdir -p './.egup.stat'

        # Copy directory structure https://stackoverflow.com/questions/4073969/copy-folder-structure-sans-files-from-one-location-to-another
        rsync -a --chmod=ugo=rwX -f'- /.egup.stat/**' -f'+ */' -f'- *' -f'- /.egup.stat/**' . ./.egup.stat/

        statPrintFormatString='%p\0%l\0%y:%m:%U:%u:%G:%g:%TY:%Tm:%Td:%TH:%TM:%TS:%TZ::%t\0'

        find . -path '*/.git' -prune -o -path './.egup.stat' -prune -o -path './.egup.git' -prune -o -path './.egup.stat.d' -prune -o -path './.egup.git-config' -prune -o -path '*/.git/*' -prune -o -path . -o \( \( -path './specification/engineering-and-tech/information-technology/env' -o -path './identifiers.lst' \) -and "$emberWebRepositoryFolderName" \) -prune -o \( -type d -and \( -exec test -e '{}/.git' \; \) -and "$emberWebSnapshotsRepositoryFolderName" \) -prune -and -printf "$statPrintFormatString" -or -not -path './.egup.version' -not -path './.egup.tags' -not -path './.egup.branches' -not -path './.egup.refs' -not -path './.egup.remotes' -printf "$statPrintFormatString" | while IFS= read -rd '' statPath; IFS= read -rd '' statLink; IFS= read -rd '' statStat; do
            # Figure out what the length in bytes of the filename is. Most filesystems do not permit more than 255 bytes, so if it is more than 255 bytes, use a hash of it instead (including the .egup.stat to hopefully prevent collisions). The difference of ten bytes is because of the ".egup.stat" extension.
            statName="$statPath"
            if [[ "${statPath: -1}" == "/" ]]; then
                statName="${statPath::-1}"
            fi
            statName="${statName##*/}"
            origLang="$LANG" origLcAll="$LC_ALL"
            LANG=C LC_ALL=C
            statNameLength="${#statName}"
            LANG="$origLang" LC_ALL="$origLcAll"
            if [[ "$statNameLength" -ge 245 ]]; then
                statPathDir="${statPath%/*}"
                statName="$(sha512sum <<< "$statPathDir/$statName.egup-stat" | awk '{print $1;}')"
                printf '%s' "$statPath" > "./.egup.stat/$statPathDir/$statName.egup-sp"
                printf '%s\n%s\n' "$statLink" "$statStat" > "./.egup.stat/$statPathDir/$statName.egup-stat" || break
            else
                printf '%s\n%s\n' "$statLink" "$statStat" > "./.egup.stat/$statPath.egup-stat" || break
            fi
        done
    fi

    git add -A || die "Error adding tag changes."
    trap - ERR
    git commit -a -m "[egup] Update repository metadata$commitMessageAppendable" || true
    trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd)."' ERR

    if [[ "$offline" != "true" ]]; then
        retryUntilSuccess 100 30 5 5 git pull --all || die "Error pulling."
        # FIXME UNCOMMENT retryUntilSuccess 100 30 5 5 git submodule update --remote || warn "Error updating submodules. Maybe a remote server is down?"
        if ! [[ -f .egup.nopush ]]; then
            retryUntilSuccess 100 30 5 5 git push --verbose --tags -u origin master || die "Error pushing changes."
            retryUntilSuccess 100 30 5 5 git push --verbose --all -u origin || die "Error pushing changes."
        fi
    fi

    if [[ "$status" == "partial" ]]; then
        status="completed"
    else
        status="partial"
    fi
done

egupexit
