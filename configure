#!/usr/bin/env bash
set -x

# Special configure for ember-shared.

if [[ -e "configured" ]]; then
    echo "ERROR: This source tree has already been configured once. Please use a clean source tree to configure."

packageName="$(cat package-name)"

#NOTE: MAINTENANCE: Manual error printing
trap 'printf '\''%b'\'' '\''\033[1;31m'\'' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd)." >&2; printf '\''%b'\'' '\''\033[0m'\'' >&2; exit 1' ERR

rm -f support/.{prefix,mandir,infodir,datadir,sysconfdir,localstatedir}

currentArgPrefix=""
module=""
while [[ -n "$1" ]]; do
    currentArgPrefix="${1%%=*}"
    case $currentArgPrefix in
    --prefix)
        printf '%s' "${1#*=}" > support/.prefix
        ;;
    --mandir)
        printf '%s' "${1#*=}" > support/.mandir
        ;;
    --infodir)
        printf '%s' "${1#*=}" > support/.infodir
        ;;
    --datadir)
        printf '%s' "${1#*=}" > support/.datadir
        ;;
    --sysconfdir)
        printf '%s' "${1#*=}" > support/.sysconfdir
        ;;
    --localstatedir)
        printf '%s' "${1#*=}" > support/.localstatedir
        ;;
    --module)
        shift
        module="${1#*=}"
        ;;
    *)
        true
        ;;
    esac
    shift
done

echo "Success will be indicated by printing"' "Configuring complete".'
if [[ -n "$module" ]]; then
    rm scripts/*
    if [[ ! -d modules/"$module" ]]; then
        echo "Module $module not found."
        exit 1
    fi
    echo "$module" > module-name
    mv modules/"$module"/* scripts/
    # Simple modules use a simple Makefile for reduced dependencies
    case $module in
    error-notify)
        mv support/error-notify.Makefile Makefile
        ;;
    core)
        mv support/core.Makefile Makefile
        ;;
    extra)
        # "extra" module should not install duplicate copies of things
        mv data data.bak
        mkdir support.bak
        mv support/*.conf support.bak/
        ;;
    *)
        true
        ;;
    esac
else
    # Not using module-split installation
    if [[ -e 'scripts.bak' ]]; then
        pwd
        ls
        echo "scripts.bak already exists. Is this not a clean source tree?"
        if [[ -e 'scripts.bak.2' ]]; then
            echo "scripts.bak.2 already exists. Is this not a clean source tree?"
            exit 1
        fi
        mv scripts.bak scripts.bak.2
    fi
    mv scripts scripts.bak
    cp -r scripts.bak scripts
    mv modules/error-notify/* scripts/
    mv modules/core/* scripts/
    mv modules/main/* scripts/
    mv modules/extra/* scripts/
fi

if ! fmwtk_loc="$(type -P "futuramerlin-web-toolkit-build")" || [[ -z $fmwtk_loc ]]; then
    echo $'\n'"futuramerlin-web-toolkit not found: documentation will not be built."$'\n'
fi
touch "configured"
echo "Configuring complete."
