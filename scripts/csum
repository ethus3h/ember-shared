#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

((EUID)) && exec sudo -- "$0" "$@"

trap 'error-notify "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."; exit 1' ERR

action="--save"
if [[ "$1" == "--save" ]]; then
    shift
elif [[ "$1" == "--check" ]]; then
    action="--check"
    shift
fi

# No arguments: Csum current dir to stdout. One argument: Csum to stdout. Two+ arguments: last is csum file.

if [[ "$#" == "0" ]]; then
    pathsToCsum=(".")
    checksumFile=""
elif [[ "$#" == "1" ]]; then
    pathsToCsum=("$1")
    checksumFile=""
else
    pathsToCsum=("${@:1:$(($#-1))}") # all but last argument
    checksumFile="${!#}" # last argument
fi

if [[ "$checksumFile" == "-" ]]; then
    checksumFile=""
fi

case $action in
--save)
    setVariableToCommandOutput currentworkingdir pwd -P
    currentworkingdir="${currentworkingdir:?}"
    currentworkingdir="${currentworkingdir//$'\n'/'\n'}"
    argsRelativeToRoot=()
    for arg in "${pathsToCsum[@]}"; do
        argsRelativeToRoot+=(".$(abspath "$arg")")
    done
    # Do two passes to make sure nothing changed while reading and there weren't other errors
    # First pass
    firstPass="$(tempFile)"
    {
        printf '%s\n' "${currentworkingdir//$'\r'/'\r'}"
        (
            cd / || die
            hashdeep -c md5,sha1,sha256,tiger,whirlpool -j0 -e -o fbsd -r -l "${argsRelativeToRoot[@]}"
        ) || die
    } > "$firstPass"
    # Second pass
    secondPass="$(tempFile)"
    {
        printf '%s\n' "${currentworkingdir//$'\r'/'\r'}"
        (
            cd / || die
            hashdeep -c md5,sha1,sha256,tiger,whirlpool -j0 -e -o fbsd -r -l "${argsRelativeToRoot[@]}"
        ) || die
    } > "$secondPass"
    assert fileEquals "$firstPass" "$secondPass" || die
    if [[ -z "$checksumFile" ]]; then
        cat "$firstPass"
        rm "$firstPass"
    else
        mv "$firstPass" "$checksumFile"
    fi
    rm "$secondPass"
    ;;
--check)
    streamId="csum-$(date-uuid)"

    finish() {
        if [[ -e "/tmp/${streamId:?}" ]]; then
            rm "/tmp/${streamId:?}"
        fi
    }
    trap 'error-notify "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."; finish; exit 1' ERR
    trap finish EXIT

    offset="2" # original format
    if [[ "a2b2d0d9-a945-4582-8caa-8151f21fa977" == "$(head -n 1 "$checksumFile")" ]]; then
        offset="3"
    fi

    if [[ -z "$checksumFile" ]]; then
        cat > "/tmp/$streamId"
        tail -n +2 < "/tmp/$streamId" | sponge "/tmp/$streamId"
    else
        tail -n +2 "$checksumFile" > "/tmp/$streamId"
    fi

    if [[ "$(tail -c 1 "/tmp/$streamId" | xxd -p)" == "00" ]]; then
        # FIXME: Auditing null-delimited hash files isn't supported by hashdeep yet. See https://github.com/jessek/hashdeep/issues/384.
        hashdeep -0 -k "/tmp/$streamId" -e -o fbsd -r -l -a -v -v "${pathsToCsum[@]}" || {
                die "Hashdeep failed checksum verification! Reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate). Hashdeep version: $(hashdeep -V)."
            }
    else
       hashdeep -k "/tmp/$streamId" -e -o fbsd -r -l -a -v -v "${pathsToCsum[@]}" || {
                die "Hashdeep failed checksum verification! Reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate). Hashdeep version: $(hashdeep -V)."
            }
    fi
    finish
    ;;
*)
    echo "Unknown action."
    exit 1
    ;;
esac
